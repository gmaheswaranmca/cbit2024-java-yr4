### AVL Tree Insertion Explained with an Example

AVL trees are self-balancing binary search trees. 
The balance factor of a node is the height difference between the left and right subtrees. 
An AVL tree maintains a balance factor of -1, 0, or 1 for every node. 
If the balance factor goes outside this range after an insertion, 
rotations are performed to restore the balance.

### Rotations in AVL Trees

1. **Left Rotation (LL Rotation)**
2. **Right Rotation (RR Rotation)**
3. **Left-Right Rotation (LR Rotation)**
4. **Right-Left Rotation (RL Rotation)**

Let's go through an example of inserting nodes into an AVL tree 
and performing necessary rotations to keep it balanced.

### Example

Insert the following sequence of numbers into an initially empty AVL tree: 
10, 20, 30, 40, 50, 25.

### Steps:

#### 1. Insert 10:
```
   10
```
The tree is balanced.

#### 2. Insert 20:
```
   10
     \
     20
```
The tree is balanced.

#### 3. Insert 30:
```
   10
     \
     20
       \
       30
```
The tree is unbalanced (Right-Right case), requiring a left rotation at node 10.

**Left Rotation at 10:**
```
   20
  /  \
 10   30
```
The tree is balanced.

#### 4. Insert 40:
```
   20
  /  \
 10   30
         \
         40
```
The tree is balanced.

#### 5. Insert 50:
```
   20
  /  \
 10   30
         \
         40
           \
           50
```
The tree is unbalanced (Right-Right case), requiring a left rotation at node 30.

**Left Rotation at 30:**
```
   20
  /  \
 10   40
      / \
     30  50
```
The tree is balanced.

#### 6. Insert 25:
```
   20
  /  \
 10   40
      / \
     30  50
    /
   25
```
The tree is unbalanced (Right-Left case), requiring a right-left rotation at node 40.

**Right Rotation at 40:**
```
   20
  /  \
 10   30
      / \
     25  40
           \
           50
```

**Left Rotation at 20:**
```
   30
  /  \
 20   40
 / \    \
10  25  50
```
The tree is now balanced.

### Code Implementation

Here is a Java implementation of AVL Tree Insertion:

class TreeNode {
    int val;
    TreeNode left, right;
    int height;

    TreeNode(int d) {
        val = d;
        height = 1;
    }
}

public class AVLTree {
    
    private int height(TreeNode N) {
        if (N == null)
            return 0;
        return N.height;
    }

    private int max(int a, int b) {
        return (a > b) ? a : b;
    }

    private TreeNode rightRotate(TreeNode y) {
        TreeNode x = y.left;
        TreeNode T2 = x.right;

        // Perform rotation
        x.right = y;
        y.left = T2;

        // Update heights
        y.height = max(height(y.left), height(y.right)) + 1;
        x.height = max(height(x.left), height(x.right)) + 1;

        // Return new root
        return x;
    }

    private TreeNode leftRotate(TreeNode x) {
        TreeNode y = x.right;
        TreeNode T2 = y.left;

        // Perform rotation
        y.left = x;
        x.right = T2;

        // Update heights
        x.height = max(height(x.left), height(x.right)) + 1;
        y.height = max(height(y.left), height(y.right)) + 1;

        // Return new root
        return y;
    }

    private int getBalance(TreeNode N) {
        if (N == null)
            return 0;
        return height(N.left) - height(N.right);
    }

    private TreeNode insert(TreeNode node, int key) {
        // 1. Perform the normal BST insertion
        if (node == null)
            return (new TreeNode(key));

        if (key < node.val)
            node.left = insert(node.left, key);
        else if (key > node.val)
            node.right = insert(node.right, key);
        else // Duplicate keys are not allowed in AVL tree
            return node;

        // 2. Update height of this ancestor node
        node.height = 1 + max(height(node.left), height(node.right));

        // 3. Get the balance factor of this ancestor node to check whether
        // this node became unbalanced
        int balance = getBalance(node);

        // If this node becomes unbalanced, then there are 4 cases

        // Left Left Case
        if (balance > 1 && key < node.left.val)
            return rightRotate(node);

        // Right Right Case
        if (balance < -1 && key > node.right.val)
            return leftRotate(node);

        // Left Right Case
        if (balance > 1 && key > node.left.val) {
            node.left = leftRotate(node.left);
            return rightRotate(node);
        }

        // Right Left Case
        if (balance < -1 && key < node.right.val) {
            node.right = rightRotate(node.right);
            return leftRotate(node);
        }

        // return the (unchanged) node pointer
        return node;
    }

    // A utility function to print preorder traversal of the tree.
    // The function also prints height of every node
    private void preOrder(TreeNode node) {
        if (node != null) {
            System.out.print(node.val + " ");
            preOrder(node.left);
            preOrder(node.right);
        }
    }

    public static void main(String[] args) {
        AVLTree tree = new AVLTree();
        TreeNode root = null;

        /* Constructing tree given in the above figure */
        int keys[] = {10, 20, 30, 40, 50, 25};

        for (int key : keys) {
            root = tree.insert(root, key);
        }

        System.out.println("Pre-order traversal of the constructed AVL tree is:");
        tree.preOrder(root);
    }
}


### Explanation:

- **TreeNode Class:** Defines a node in the AVL tree, which contains value (`val`), left and right children, and height.
- **get_height():** Returns the height of the node.
- **get_balance():** Calculates the balance factor of the node.
- **left_rotate() and right_rotate():** Functions to perform left and right rotations respectively.
- **insert():** Inserts a node into the AVL tree and balances it using rotations if necessary.
- **pre_order_traversal():** Traverses the tree in pre-order for checking the structure.

The above example demonstrates how AVL tree insertion ensures the tree remains balanced by performing rotations whenever necessary.